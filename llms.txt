## Import

Import the fluent.css file from CDN hosting via one of the 2 options:

1. In the HTML head as a `link` tag (Preferred):

```html
<link rel="stylesheet" href="https://esm.sh/gh/aipx-proto/fluent-css@main/build/fluent.css?raw" />
```

2. In CSS via css `@import`:

```css
@import "https://esm.sh/gh/aipx-proto/fluent-css@main/build/fluent.css?raw";
```

---

## Component Usage

### Default HTML element styling

The `fluent.css` file styles all native html elements (`a`, `button`, `input`, `select`, `textarea`, `details`, etc...)
**DO NOT** apply interactive (`:hover`, `:active`, `:focus`) or visual (`background`, `border`, `color`, `font`, etc..) css styles to these native html elements because they are already styled by fluent.css.
Applying additional styles will break the visual styling, not improve it.

### Component Class Styling

`fluent.css` also provides class names for several component classes and modifiers.

...

## Tailwind Integration (Optional)

{...Describe integration}
{if not using tailwind, skip this section}

### Tailwind usage rules

- Write only in sematic HTML with css utility classes,
- Write styles **exclusively** using utility classes from tailwind and fluent.css.
- Use tailwind classes **mostly** for layout, flexbox, grid, spacing.
- Use fluent.css default styles and classes for native html elements
- **DO NOT** write any CSS in `<style/>` elements or `.css` files.
- **DO NOT** write any inline `style=""` attributes.
- **DO NOT** apply tailwind classes on any table element: `table`, `thead`, `tr`, `td`, etc...

### Import tailwind

Import the tailwind browser runtime from CDN hosting in a script tag (unless tailwind is already integrated)

```html
<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
```

---

## Icons

For icons, use emoji wrapped in a span: `<span class="emojicon">‚ù§Ô∏è</span>`.

## Design

## Colors rules

Style the app using the semantic colors and classes provided.

### Semantic colors

Grayscale colors

- `--color-card`: a background color for cards, popovers, tooltips, dialogs, etc. (default `dialog` element `background-color`)
- `--color-panel`: a background color for for most content panel backgrounds
- `--color-page`: a background color for for shell, navigation, and other persistent elements in layout (default `html` element `background-color`)
- `--color-border`: a border color for for dividing content panels or outlining cards. (default `border-color` of `button`, `input`, and `hr` elements)
- `--color-outline`: an intense border color for calling attention to a layout element. Used infrequently.
- `--color-muted`: a foreground color for reduced importance text or icon elements
- `--color-body`: the default foreground color for most text element
- `--color-heading`: a foreground color for emphasized elements like headings, titles, bolded text, etc. (default `color` of `h1`-`h6` elements)

Accent colors

- `--color-link`: a blue foreground color for hyperlinks (default `color` of `a` elements).
- `--color-brand`: a blue background color for primary interactive elements (default background-color for `button.type-primary`).

Interaction colors

- `--color-input`: the default background color for input elements like `button` or `input`
- `--color-selected`: a background color for elements that are toggled-on, selected, or emphasized in a set.
- `--color-hover`: a background color for `:hover`ed elements
- `--color-active`: a background color for `:active`/pressed elements

### Color Classes

All `--color-{variables}` are also available in the standard tailwind utility class syntax of `.{text,bg,border}-{variable}`.

- Background colors: use the utility classes: `.bg-page`, `.bg-panel`, and `.bg-card`.
- Border colors: Primarily use `,border-border`. In specific instances, you may use `.border-page`, `.border-panel`, `.border-card` and `.border-outline`.
- Text colors: use `.text-heading`, `.text-body`, and `.text-muted`.
- Accent colors: use `.background-brand` or `.text-link`.

### Light and Dark Themes

The app is styled in light theme by default. Applying a `.dark` class to a root element will change all the aforementioned semantic colors from light to dark theme.

## Typography Classes

For text properties use the standard tailwind syntax `.text-{utility}`

- font sizes: `.text-{size}` where `size` can be any of `xs`, `sm`, `md`, `base`, `lg`, `xl`, `2xl`, `3xl`, `4xl`, `5xl`, `6xl`, or `7xl`. `.text-sm` for example.
- font weight: `.text-{weight}`, where `weight` can be `normal`, `semibold`, or `bold` (lighter weights are not available). `.text-semibold` for example. Prefer using `semibold` in place of `bold`.
- font family: `.text-{family}`, where `family` can be `sans`, `mono`, or `serif`. Prefer `sans`.

## Shadow Classes (Elevation)

- box shadow: use the standard tailwind syntax `.shadow-{size}` where `size` is any of `none`, `2xs`, `xs`, `sm`, `md`, `lg`, `xl`, or `2xl`.

## Border Radius Classes

- border radius: use the standard tailwind syntax `.rounded-{size}` where `size` can be any of `none`, `xs`, `sm`, `md`, `lg`, `xl`, `2xl`, `3xl`, `4xl`, or `full`.

---

**fluent.css classes and component patterns**

```html
<!-- a more intense, brand-colored primary button -->
<button class="type-primary">Primary</button>

<!-- *(default)* - a button with an outline -->
<button>Outline</button>

<!-- a button with a dark background, and no outline -->
<button class="type-subtle">Subtle</button>

<!-- a button with no background  -->
<button class="type-transparent">Transparent</button>

<!-- displays a icon button with 1:1 aspect ratio -->
<button class="icon-only">&times;</button>

<!-- All the following elements will appear as buttons -->
<input type="reset" value="Input Reset" />
<input type="submit" value="Input Submit" />
<a href="#" class="btn">Anchor Button</a>
<select class="btn">
  <option value="">Select Button</option>
</select>

<!-- *(default)* - an input with a dark background, and no outline -->
<input type="text" placeholder="Subtle" />

<!-- *(default)* - an input with an outline -->
<input type="text" placeholder="Outline" class="type-outline" />

<!-- 
 An `.input` element will appear as visually input (with the child input unstyled). 
 This pattern should **only** be used to include buttons, icons or other content inside of an input 
 Please use this pattern instead of tailwind layout where applicable
 -->
<div class="input">
  <i class="emojicon">üîç</i>
  <input type="text" placeholder="Search" />
  <button class="size-small">Submit</button>
</div>

<!-- For the "switch" variant of a standalone checkbox, add the `.switch` class -->
<label><input type="checkbox" class="switch" checked />Checked</label>

<!-- slider input range element -->
<input type="range" min="0" max="100" value="50" />

<!-- the default progress bar -->
<progress value="33" max="100"></progress>

<!-- a pulsing progress bar -->
<progress indeterminate></progress>

<!-- The `.spinner` variation displays a circular spinning loader instead of a progress bar -->
<progress class="spinner" indeterminate></progress>

<!-- The "accordion" element is the native `details` and `summary` html elements -->
<details>
  <summary>Accordion Item</summary>
  <p>Content for the accordion item.</p>
</details>

<!-- 
 `.tab` can be either button or link elements. 
 `.tab-list` display horizontally by default, or vertically with `vertical`
 PLEASE USE THIS PATTERN FOR TABS, DO NOT RECREATE TABS
-->

<nav class="tab-list">
  <button class="tab active">Tab 1</button>
  <button class="tab">Tab 1</button>
  <button class="tab">Tab 1</button>
</nav>

<nav class="tab-list vertical">
  <a href="#" class="tab active">Tab 1</a>
  <a href="#" class="tab">Tab 1</a>
  <a href="#" class="tab">Tab 1</a>
</nav>
```
